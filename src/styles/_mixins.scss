/*
  https://css-tricks.com/snippets/sass/mixin-manage-breakpoints/
  with modifications
*/

$breakpoints: (
  'sm': 561,
  'md': 769,
  'lg':  1041,
  'xl':  1441
) !default;

/*
  Examples:
    respond-to(lg)
    respond-to(md, lg)
    respond-to(561, 768)
    respond-to(min-width, 640)
    respond-to(max-width, 640)
    respond-to(retina)
*/

@mixin respond-to($option1: null, $option2: null) {
    // both options passed
    // and are not empty
    @if ($option1 and $option2) and ($option1 != '' and $option2 != '') {

        // option2 is a number
        @if (type-of($option2) == 'number') {
            // and option1 is also a number - min / max
            @if (type-of($option1) == 'number') {
                // and is less than option2
                @if ($option1 < $option2) {
                    @media only screen and (min-width: $option1 + 0px) and (max-width: $option2 + 0px) { @content; }
                }

                @else {
                    @warn 'Invalid value. The second value must be greater than the first.';
                }
            }

            // option1 is a string - property / value
            @else {
                @media only screen and ($option1: $option2 + 0px) { @content; }
            }
        }

        // both options are breakpoints - min / max
        @else if map-has-key($breakpoints, $option1) and map-has-key($breakpoints, $option2) {
            // and option1 is less than option2
            @if (map-get($breakpoints, $option1) < map-get($breakpoints, $option2)) {
                @media only screen and (min-width: map-get($breakpoints, $option1) + 0px) and (max-width: map-get($breakpoints, $option2) - 1px) { @content; }
            }

            @else {
                @warn 'Invalid value. The second breakpoint must be larger than the first.';
            }
        }

        @else {
            @warn 'Invalid value. Examples: (561, 768), (md, lg) and (min-width, 640).';
        }
    }

    // a single option was passed
    // and is a string
    @else if (type-of($option1) == 'string') {

        // and is a breakpoint
        @if map-has-key($breakpoints, $option1) {
            @media only screen and (min-width: map-get($breakpoints, $option1) + 0px) {
                @content;
            }
        }

        // if the single option is 'retina'
        @else if ($option1 == retina) {
            @media
                only screen and (min-resolution: 144dpi) { @content; }
        }

        @else {
            @warn 'Invalid value. The options are: #{map-keys($breakpoints)} and retina.';
        }
    }

    // option 1 was a number
    @else if (type-of($option1) == 'number') {
        @warn 'Invalid value. Single option can not be a number.';
    }

    // other bad option - most probably no options
    @else {
        @warn 'Invalid value. Minimum 1 option required. Example (lg).';
    }
}
